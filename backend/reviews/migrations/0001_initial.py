# Generated by Django 5.2.5 on 2025-08-09 15:02

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('bookings', '0006_bookingpackage_bookingpackagepurchase_and_more'),
        ('skills', '0003_alter_mentortag_tag'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ReviewTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('category', models.CharField(choices=[('positive', 'Positive'), ('negative', 'Negative'), ('neutral', 'Neutral')], max_length=30)),
                ('description', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('usage_count', models.IntegerField(default=0)),
            ],
            options={
                'ordering': ['category', 'name'],
            },
        ),
        migrations.CreateModel(
            name='MentorRating',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('overall_rating', models.FloatField(default=0.0)),
                ('total_reviews', models.IntegerField(default=0)),
                ('communication_rating', models.FloatField(default=0.0)),
                ('knowledge_rating', models.FloatField(default=0.0)),
                ('punctuality_rating', models.FloatField(default=0.0)),
                ('professionalism_rating', models.FloatField(default=0.0)),
                ('five_star_count', models.IntegerField(default=0)),
                ('four_star_count', models.IntegerField(default=0)),
                ('three_star_count', models.IntegerField(default=0)),
                ('two_star_count', models.IntegerField(default=0)),
                ('one_star_count', models.IntegerField(default=0)),
                ('recommendation_count', models.IntegerField(default=0)),
                ('recommendation_percentage', models.FloatField(default=0.0)),
                ('last_review_date', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('mentor', models.OneToOneField(limit_choices_to={'role': 'mentor'}, on_delete=django.db.models.deletion.CASCADE, related_name='rating_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-overall_rating'],
            },
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('review_type', models.CharField(choices=[('mentor_review', 'Mentor Review'), ('learner_review', 'Learner Review'), ('platform_review', 'Platform Review')], max_length=20)),
                ('overall_rating', models.IntegerField(help_text='Overall rating from 1 to 5 stars', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('communication_rating', models.IntegerField(blank=True, help_text='Communication quality rating', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('knowledge_rating', models.IntegerField(blank=True, help_text='Knowledge/expertise rating', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('punctuality_rating', models.IntegerField(blank=True, help_text='Punctuality rating', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('professionalism_rating', models.IntegerField(blank=True, help_text='Professionalism rating', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('review_text', models.TextField(help_text='Detailed review text')),
                ('pros', models.TextField(blank=True, help_text='What went well')),
                ('cons', models.TextField(blank=True, help_text='Areas for improvement')),
                ('would_recommend', models.BooleanField(blank=True, help_text='Would you recommend this mentor/learner?', null=True)),
                ('is_verified', models.BooleanField(default=True, help_text='Review is from verified session')),
                ('is_anonymous', models.BooleanField(default=False, help_text='Review is anonymous')),
                ('is_featured', models.BooleanField(default=False, help_text='Featured review')),
                ('is_approved', models.BooleanField(default=True)),
                ('moderation_notes', models.TextField(blank=True)),
                ('flagged_count', models.IntegerField(default=0)),
                ('helpful_count', models.IntegerField(default=0)),
                ('reported_count', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('booking', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='bookings.booking')),
                ('reviewee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews_received', to=settings.AUTH_USER_MODEL)),
                ('reviewer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews_given', to=settings.AUTH_USER_MODEL)),
                ('tags', models.ManyToManyField(blank=True, to='reviews.reviewtag')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ReviewResponse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('response_text', models.TextField()),
                ('is_approved', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('responder', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('review', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='response', to='reviews.review')),
            ],
        ),
        migrations.CreateModel(
            name='ReviewTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('review_type', models.CharField(choices=[('mentor_review', 'Mentor Review'), ('learner_review', 'Learner Review'), ('platform_review', 'Platform Review')], max_length=20)),
                ('template_text', models.TextField()),
                ('is_active', models.BooleanField(default=True)),
                ('usage_count', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('suggested_tags', models.ManyToManyField(blank=True, to='reviews.reviewtag')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='SkillRating',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('expertise_rating', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('teaching_ability_rating', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('practical_knowledge_rating', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('mentor', models.ForeignKey(limit_choices_to={'role': 'mentor'}, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('review', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='reviews.review')),
                ('skill', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='skill_ratings', to='skills.skill')),
            ],
        ),
        migrations.CreateModel(
            name='ReviewHelpful',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('review', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='helpful_votes', to='reviews.review')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('review', 'user')},
            },
        ),
        migrations.CreateModel(
            name='ReviewReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reason', models.CharField(choices=[('inappropriate', 'Inappropriate Content'), ('spam', 'Spam'), ('fake', 'Fake Review'), ('offensive', 'Offensive Language'), ('irrelevant', 'Irrelevant Content'), ('personal_attack', 'Personal Attack'), ('other', 'Other')], max_length=20)),
                ('description', models.TextField(blank=True)),
                ('is_resolved', models.BooleanField(default=False)),
                ('resolution_notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('reporter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('resolved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resolved_reports', to=settings.AUTH_USER_MODEL)),
                ('review', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reports', to='reviews.review')),
            ],
            options={
                'ordering': ['-created_at'],
                'unique_together': {('review', 'reporter')},
            },
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['reviewee', '-created_at'], name='reviews_rev_reviewe_f0f3ae_idx'),
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['reviewer', '-created_at'], name='reviews_rev_reviewe_5e332e_idx'),
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['overall_rating'], name='reviews_rev_overall_96630a_idx'),
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['is_approved', '-created_at'], name='reviews_rev_is_appr_dbec64_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='review',
            unique_together={('reviewer', 'reviewee', 'booking', 'review_type')},
        ),
        migrations.AlterUniqueTogether(
            name='skillrating',
            unique_together={('skill', 'mentor', 'review')},
        ),
    ]
