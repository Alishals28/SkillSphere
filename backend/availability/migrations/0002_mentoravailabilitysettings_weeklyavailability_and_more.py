# Generated by Django 5.2.5 on 2025-08-09 12:07

import datetime
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('availability', '0001_initial'),
        ('bookings', '0004_bookingstatushistory_alter_booking_options_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='MentorAvailabilitySettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('min_booking_notice_hours', models.PositiveIntegerField(default=24, help_text='Minimum hours notice required for booking')),
                ('max_booking_advance_days', models.PositiveIntegerField(default=60, help_text='Maximum days in advance bookings can be made')),
                ('default_session_duration_minutes', models.PositiveIntegerField(default=60, help_text='Default session duration in minutes')),
                ('buffer_minutes_between_sessions', models.PositiveIntegerField(default=15, help_text='Buffer time between sessions')),
                ('auto_approve_bookings', models.BooleanField(default=False, help_text='Automatically approve booking requests')),
                ('is_accepting_new_bookings', models.BooleanField(default=True, help_text='Whether mentor is currently accepting new bookings')),
                ('timezone', models.CharField(default='UTC', help_text="Mentor's timezone for availability", max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Mentor Availability Settings',
                'verbose_name_plural': 'Mentor Availability Settings',
            },
        ),
        migrations.CreateModel(
            name='WeeklyAvailability',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('weekday', models.IntegerField(choices=[(0, 'Monday'), (1, 'Tuesday'), (2, 'Wednesday'), (3, 'Thursday'), (4, 'Friday'), (5, 'Saturday'), (6, 'Sunday')])),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['weekday', 'start_time'],
            },
        ),
        migrations.AlterModelOptions(
            name='availabilityexception',
            options={'ordering': ['start_utc']},
        ),
        migrations.AlterModelOptions(
            name='availabilityslot',
            options={'ordering': ['start_utc']},
        ),
        migrations.RenameField(
            model_name='availabilityexception',
            old_name='is_full_day',
            new_name='is_all_day',
        ),
        migrations.RemoveField(
            model_name='availabilityslot',
            name='recurring_rule',
        ),
        migrations.AddField(
            model_name='availabilityexception',
            name='created_at',
            field=models.DateTimeField(auto_now_add=True, default=datetime.datetime(2025, 8, 9, 12, 5, 6, 423771, tzinfo=datetime.timezone.utc)),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='availabilityexception',
            name='exception_type',
            field=models.CharField(choices=[('unavailable', 'Unavailable'), ('vacation', 'Vacation'), ('break', 'Break'), ('busy', 'Busy'), ('custom', 'Custom')], default='unavailable', max_length=20),
        ),
        migrations.AddField(
            model_name='availabilityslot',
            name='booking',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='availability_slot', to='bookings.booking'),
        ),
        migrations.AddField(
            model_name='availabilityslot',
            name='is_blocked',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='availabilityslot',
            name='notes',
            field=models.TextField(blank=True),
        ),
        migrations.AlterField(
            model_name='availabilityexception',
            name='mentor',
            field=models.ForeignKey(limit_choices_to={'role': 'mentor'}, on_delete=django.db.models.deletion.CASCADE, related_name='availability_exceptions', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='availabilityslot',
            name='mentor',
            field=models.ForeignKey(limit_choices_to={'role': 'mentor'}, on_delete=django.db.models.deletion.CASCADE, related_name='availability_slots', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddIndex(
            model_name='availabilityexception',
            index=models.Index(fields=['mentor', 'start_utc'], name='availabilit_mentor__203332_idx'),
        ),
        migrations.AddIndex(
            model_name='availabilityexception',
            index=models.Index(fields=['start_utc', 'end_utc'], name='availabilit_start_u_6f47a8_idx'),
        ),
        migrations.AddField(
            model_name='mentoravailabilitysettings',
            name='mentor',
            field=models.OneToOneField(limit_choices_to={'role': 'mentor'}, on_delete=django.db.models.deletion.CASCADE, related_name='availability_settings', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='weeklyavailability',
            name='mentor',
            field=models.ForeignKey(limit_choices_to={'role': 'mentor'}, on_delete=django.db.models.deletion.CASCADE, related_name='weekly_availability', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='availabilityslot',
            name='weekly_availability',
            field=models.ForeignKey(blank=True, help_text='If this slot was generated from weekly pattern', null=True, on_delete=django.db.models.deletion.SET_NULL, to='availability.weeklyavailability'),
        ),
        migrations.AddIndex(
            model_name='availabilityslot',
            index=models.Index(fields=['start_utc', 'end_utc'], name='availabilit_start_u_4e475f_idx'),
        ),
        migrations.AddIndex(
            model_name='availabilityslot',
            index=models.Index(fields=['is_booked', 'is_blocked'], name='availabilit_is_book_90624d_idx'),
        ),
        migrations.AddConstraint(
            model_name='availabilityslot',
            constraint=models.CheckConstraint(condition=models.Q(('start_utc__lt', models.F('end_utc'))), name='start_before_end'),
        ),
        migrations.AddIndex(
            model_name='weeklyavailability',
            index=models.Index(fields=['mentor', 'weekday', 'is_active'], name='availabilit_mentor__b5c094_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='weeklyavailability',
            unique_together={('mentor', 'weekday', 'start_time', 'end_time')},
        ),
    ]
