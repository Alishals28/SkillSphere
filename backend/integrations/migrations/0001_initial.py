# Generated by Django 5.2.5 on 2025-08-09 15:30

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='IntegrationProvider',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('provider_type', models.CharField(choices=[('calendar', 'Calendar'), ('payment', 'Payment'), ('video', 'Video Conferencing'), ('storage', 'Cloud Storage'), ('email', 'Email Service'), ('analytics', 'Analytics'), ('social', 'Social Media'), ('communication', 'Communication'), ('crm', 'CRM'), ('lms', 'Learning Management System')], max_length=20)),
                ('display_name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('logo_url', models.URLField(blank=True)),
                ('website_url', models.URLField(blank=True)),
                ('api_base_url', models.URLField()),
                ('auth_type', models.CharField(choices=[('oauth2', 'OAuth 2.0'), ('api_key', 'API Key'), ('basic', 'Basic Auth'), ('bearer', 'Bearer Token')], max_length=20)),
                ('client_id', models.CharField(blank=True, max_length=255)),
                ('client_secret', models.CharField(blank=True, max_length=255)),
                ('authorization_url', models.URLField(blank=True)),
                ('token_url', models.URLField(blank=True)),
                ('scope', models.CharField(blank=True, max_length=500)),
                ('is_active', models.BooleanField(default=True)),
                ('requires_approval', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'indexes': [models.Index(fields=['provider_type', 'is_active'], name='integration_provide_cdcf2d_idx')],
            },
        ),
        migrations.CreateModel(
            name='UserIntegration',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('access_token', models.TextField(blank=True)),
                ('refresh_token', models.TextField(blank=True)),
                ('token_expires_at', models.DateTimeField(blank=True, null=True)),
                ('api_key', models.CharField(blank=True, max_length=500)),
                ('status', models.CharField(choices=[('active', 'Active'), ('expired', 'Expired'), ('revoked', 'Revoked'), ('error', 'Error'), ('pending', 'Pending')], default='pending', max_length=20)),
                ('last_sync', models.DateTimeField(blank=True, null=True)),
                ('sync_enabled', models.BooleanField(default=True)),
                ('settings', models.JSONField(blank=True, default=dict)),
                ('permissions', models.JSONField(blank=True, default=list)),
                ('external_user_id', models.CharField(blank=True, max_length=255)),
                ('external_username', models.CharField(blank=True, max_length=255)),
                ('external_email', models.EmailField(blank=True, max_length=254)),
                ('connected_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('provider', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_integrations', to='integrations.integrationprovider')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='integrations', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PaymentIntegration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('merchant_id', models.CharField(blank=True, max_length=255)),
                ('account_id', models.CharField(blank=True, max_length=255)),
                ('account_status', models.CharField(blank=True, max_length=50)),
                ('default_currency', models.CharField(default='USD', max_length=3)),
                ('supported_currencies', models.JSONField(default=list)),
                ('platform_fee_percentage', models.DecimalField(decimal_places=2, default=2.5, max_digits=5)),
                ('transaction_fee_flat', models.DecimalField(decimal_places=2, default=0.3, max_digits=8)),
                ('auto_payout', models.BooleanField(default=True)),
                ('payout_schedule', models.CharField(choices=[('daily', 'Daily'), ('weekly', 'Weekly'), ('monthly', 'Monthly')], default='weekly', max_length=20)),
                ('minimum_payout', models.DecimalField(decimal_places=2, default=25.0, max_digits=8)),
                ('last_payout', models.DateTimeField(blank=True, null=True)),
                ('total_processed', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('user_integration', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='payment_settings', to='integrations.userintegration')),
            ],
        ),
        migrations.CreateModel(
            name='IntegrationLog',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('level', models.CharField(choices=[('debug', 'Debug'), ('info', 'Info'), ('warning', 'Warning'), ('error', 'Error'), ('critical', 'Critical')], max_length=10)),
                ('action_type', models.CharField(choices=[('auth', 'Authentication'), ('sync', 'Synchronization'), ('create', 'Create'), ('update', 'Update'), ('delete', 'Delete'), ('webhook', 'Webhook'), ('api_call', 'API Call')], max_length=20)),
                ('message', models.TextField()),
                ('request_data', models.JSONField(blank=True, null=True)),
                ('response_data', models.JSONField(blank=True, null=True)),
                ('error_details', models.JSONField(blank=True, null=True)),
                ('booking_id', models.UUIDField(blank=True, null=True)),
                ('external_id', models.CharField(blank=True, max_length=255)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user_integration', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='logs', to='integrations.userintegration')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CalendarIntegration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('default_calendar_id', models.CharField(blank=True, max_length=255)),
                ('calendar_name', models.CharField(blank=True, max_length=255)),
                ('timezone', models.CharField(blank=True, max_length=50)),
                ('sync_upcoming_sessions', models.BooleanField(default=True)),
                ('sync_availability', models.BooleanField(default=True)),
                ('create_booking_events', models.BooleanField(default=True)),
                ('update_booking_events', models.BooleanField(default=True)),
                ('delete_cancelled_events', models.BooleanField(default=True)),
                ('event_title_template', models.CharField(default='Mentoring Session with {participant}', help_text='Available variables: {participant}, {subject}, {duration}', max_length=255)),
                ('event_description_template', models.TextField(default='Subject: {subject}\nDuration: {duration} minutes\nPlatform: SkillSphere', help_text='Available variables: {subject}, {duration}, {mentor}, {learner}')),
                ('add_reminders', models.BooleanField(default=True)),
                ('reminder_minutes', models.JSONField(default=list, help_text='List of minutes before event to remind')),
                ('last_sync', models.DateTimeField(blank=True, null=True)),
                ('sync_errors', models.JSONField(blank=True, default=list)),
                ('user_integration', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='calendar_settings', to='integrations.userintegration')),
            ],
        ),
        migrations.CreateModel(
            name='VideoConferencingIntegration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.CharField(blank=True, max_length=255)),
                ('display_name', models.CharField(blank=True, max_length=255)),
                ('email', models.EmailField(blank=True, max_length=254)),
                ('auto_create_meetings', models.BooleanField(default=True)),
                ('default_meeting_type', models.CharField(choices=[('instant', 'Instant Meeting'), ('scheduled', 'Scheduled Meeting'), ('recurring', 'Recurring Meeting')], default='scheduled', max_length=20)),
                ('enable_waiting_room', models.BooleanField(default=True)),
                ('enable_recording', models.BooleanField(default=False)),
                ('auto_record', models.BooleanField(default=False)),
                ('mute_participants_on_entry', models.BooleanField(default=True)),
                ('require_password', models.BooleanField(default=True)),
                ('allow_join_before_host', models.BooleanField(default=False)),
                ('send_meeting_invites', models.BooleanField(default=True)),
                ('send_reminders', models.BooleanField(default=True)),
                ('user_integration', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='video_settings', to='integrations.userintegration')),
            ],
        ),
        migrations.CreateModel(
            name='WebhookEndpoint',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('url_path', models.CharField(max_length=255, unique=True)),
                ('secret_key', models.CharField(max_length=255)),
                ('supported_events', models.JSONField(default=list)),
                ('is_active', models.BooleanField(default=True)),
                ('verify_signature', models.BooleanField(default=True)),
                ('allowed_ips', models.JSONField(blank=True, default=list)),
                ('total_received', models.PositiveIntegerField(default=0)),
                ('last_received', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('provider', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='webhook_endpoints', to='integrations.integrationprovider')),
            ],
        ),
        migrations.CreateModel(
            name='WebhookEvent',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('event_type', models.CharField(max_length=100)),
                ('event_id', models.CharField(blank=True, max_length=255)),
                ('payload', models.JSONField()),
                ('headers', models.JSONField(default=dict)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('processed', 'Processed'), ('failed', 'Failed'), ('ignored', 'Ignored')], default='pending', max_length=20)),
                ('processed_at', models.DateTimeField(blank=True, null=True)),
                ('retry_count', models.PositiveIntegerField(default=0)),
                ('error_message', models.TextField(blank=True)),
                ('source_ip', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True)),
                ('signature_valid', models.BooleanField(blank=True, null=True)),
                ('received_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('endpoint', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='events', to='integrations.webhookendpoint')),
            ],
            options={
                'ordering': ['-received_at'],
            },
        ),
        migrations.AddIndex(
            model_name='userintegration',
            index=models.Index(fields=['user', 'status'], name='integration_user_id_aeba57_idx'),
        ),
        migrations.AddIndex(
            model_name='userintegration',
            index=models.Index(fields=['provider', 'status'], name='integration_provide_4544bc_idx'),
        ),
        migrations.AddIndex(
            model_name='userintegration',
            index=models.Index(fields=['status', 'sync_enabled'], name='integration_status_6d2b94_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='userintegration',
            unique_together={('user', 'provider')},
        ),
        migrations.AddIndex(
            model_name='integrationlog',
            index=models.Index(fields=['user_integration', 'created_at'], name='integration_user_in_72c0d8_idx'),
        ),
        migrations.AddIndex(
            model_name='integrationlog',
            index=models.Index(fields=['level', 'created_at'], name='integration_level_ef800b_idx'),
        ),
        migrations.AddIndex(
            model_name='integrationlog',
            index=models.Index(fields=['action_type', 'created_at'], name='integration_action__bfa1b4_idx'),
        ),
        migrations.AddIndex(
            model_name='webhookevent',
            index=models.Index(fields=['endpoint', 'received_at'], name='integration_endpoin_1ec1fe_idx'),
        ),
        migrations.AddIndex(
            model_name='webhookevent',
            index=models.Index(fields=['status', 'received_at'], name='integration_status_7b7642_idx'),
        ),
        migrations.AddIndex(
            model_name='webhookevent',
            index=models.Index(fields=['event_type', 'received_at'], name='integration_event_t_da57b5_idx'),
        ),
    ]
